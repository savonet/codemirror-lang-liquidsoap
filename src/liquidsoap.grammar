@context noUminus from "./tokens.js"

@precedence {
  uminus,
  blockComment @right
  include @left
  stringInterpolation @right
  lpar,
  no_app @right,
  colon,
  dot @left,
  get,
  coloncolon @right,
  minus @left,
  bin3 @left,
  bin2 @left,
  bin1 @left,
  not,
  or @left,
  and @left,
  question,
  set @right,
  coalesce,
  yields,
  binding
}

@top SourceFile {
  exprs
}


kw<term> { Keyword { term } }
ckw<term> { ControlKeyword { term } }
dkw<term> { DefinitionKeyword { term } }
lop<term> { LogicalOperator { Op { term } } }
cop<term> { ControlOperator { Op { term } } }
aop<term> { ArithmeticOperator { Op { term } } }
defined<term> { Defined { term } }

Var {
  var
}

Varlpar {
  varLpar
}

varlbra {
  Var { varLbra }
}

optvar {
  "_" |
  Var
}

encoderParam {
  Var "=" expr |
  String "=" expr |
  Var |
  String |
  Encoder
}

encoderParams {
  encoderParam |
  encoderParam "," encoderParams
}

Encoder {
  encoderName (!no_app "(" EncoderParams { encoderParams }? ")")?
}

regexpContent {
  regexpContentToken | regexpSlashNoEscape | EscapedChar { "\\" "/" }
}

Regexp {
  RegexpStart[closedBy=RegexpEnd] { "r/" } regexpContent* RegexpEnd
}

String {
  doubleQuoteString |
  singleQuoteString
}

StringInterpolation {
  expr
}

doubleQuoteStringContent {
  doubleQuoteStringContentToken | EscapedChar
}

InterpolatedStringStart[closedBy=InterpolatedStringEnd] { "#{" }

InterpolatedStringEnd[openedBy=InterpolatedStringStart] { "}" }

beginDoubleQuoteInterpolatedString {
  "\"" doubleQuoteStringContent* InterpolatedStringStart
}

innerDoubleQuoteInterpolatedString {
  InterpolatedStringEnd doubleQuoteStringContent* InterpolatedStringStart StringInterpolation
}

endDoubleQuoteInterpolatedString {
 !stringInterpolation InterpolatedStringEnd doubleQuoteStringContent* "\""
}

doubleQuoteStringInterpolation {
  beginDoubleQuoteInterpolatedString StringInterpolation (innerDoubleQuoteInterpolatedString)* endDoubleQuoteInterpolatedString
}

doubleQuoteString {
  doubleQuoteStringInterpolation |
  !stringInterpolation "\"" doubleQuoteStringContent* "\""
}

singleQuoteStringContent {
  singleQuoteStringContentToken | EscapedChar
}

beginSingleQuoteInterpolatedString {
  "'" singleQuoteStringContent* InterpolatedStringStart
}

innerSingleQuoteInterpolatedString {
  InterpolatedStringEnd singleQuoteStringContent* InterpolatedStringStart StringInterpolation
}

endSingleQuoteInterpolatedString {
 !stringInterpolation InterpolatedStringEnd singleQuoteStringContent* "'"
}

singleQuoteStringInterpolation {
  beginSingleQuoteInterpolatedString StringInterpolation (innerSingleQuoteInterpolatedString)* endSingleQuoteInterpolatedString
}

singleQuoteString {
  singleQuoteStringInterpolation |
  "'" singleQuoteStringContent* "'"
}

exprs {
  kw<"open"> expr exprSep? exprs |
  expr exprSep? |
  expr exprSep? exprs |
  binding exprSep? |
  binding exprSep? exprs
}

simpleFunBody {
  kw<"open"> expr exprSep? exprs |
  expr exprSep? |
  expr exprSep? exprs |
  explicitBinding exprSep? |
  explicitBinding exprSep? exprs
}

Arglist {
  "(" ((arg ",")* arg)? ")"
}

opt {
  "=" expr
}

AnonymousArgument {
  optvar opt? |
  "(" optvar ":" Type ")" opt?
}

LabeledArgument {
  "~" Var opt? |
  "~" "(" Var ":" Type ")" opt? |
  "~" Var "=" "_"
}

Argsof {
  kw<"%argsof"> "(" Var ")" |
  kw<"%argsof"> "(" Subfield ")" |
  kw<"%argsof"> "(" varlbra "[" argsOfParams "]" ")" |
  kw<"%argsof"> "(" SubfieldLbra "[" argsOfParams "]" ")"
}

arg {
  LabeledArgument |
  AnonymousArgument |
  Argsof
}

KeepArg {
  Var
}

ExcludeArg {
  "!" Var
}

argsOfParams {
  KeepArg |
  ExcludeArg |
  KeepArg "," argsOfParams |
  ExcludeArg "," argsOfParams
}

parseDecorationEl {
  Var |
  Var "=" expr
}

parseDecorationArgs {
  (parseDecorationEl ",")* parseDecorationEl
}

parseDecoration /* precedence: right 1 */ {
  (kw<"json"> | kw<"yaml">) "." kw<"parse"> (!no_app "[" parseDecorationArgs? "]")?
}

defDecoration {
  LetDecoration {
    kw<"rec"> |
    kw<"replaces">
  }
}

LetDecoration {
  kw<"eval"> |
  kw<"replaces"> |
  parseDecoration
}

let {
  dkw<"let"> LetDecoration?
}

def {
  dkw<"def"> defDecoration?
}

Def {
  def "(" defined<optvar> ":" Type ")" "="? Definition { exprs } dkw<"end"> |
  def defined<optvar> "="? Definition { exprs } dkw<"end"> |
  def defined<Subfield> "="? Definition { exprs } dkw<"end"> |
  def defined<(SubfieldLpar | Varlpar)> Arglist "="? Definition { exprs } dkw<"end">
}

Let {
  let defined<Subfield> "=" Definition { expr } |
  let defined<pattern> "=" Definition { expr } |
  let "(" defined<pattern> ":" Type ")" "=" Definition { expr }
}

explicitBinding {
  Let |
  Def
}

Binding {
  defined<optvar> !binding "=" Definition { expr }
}

binding /* precedence: binding */ {
  explicitBinding |
  Binding
}

patternList {
  pattern |
  patternList "," pattern
}

Spread {
  Op { "..." } optvar?
}

patternListWithSpread {
  Spread |
  patternList |
  Spread "," patternList |
  patternList "," Spread |
  patternList "," Spread "," patternList
}

TuplePattern {
  "(" patternList? ")"
}

ListPattern {
  "[" patternListWithSpread "]"
}

methPatternEl {
  Var |
  Var "?" |
  Var "=" pattern
}

methPatternList {
  methPatternEl |
  methPatternEl "," methPatternList
}

recordPattern {
  "{" methPatternList? "}"
}

recordSpreadPattern {
  "{" methSpreadList "}"
}

methSpreadList /* precedence: left 1 */ {
  Op { "..." } optvar? |
  methPatternEl "," methSpreadList
}

MethPattern {
  recordSpreadPattern |
  recordPattern |
  Var "." recordPattern |
  "_" "." recordPattern |
  TuplePattern "." recordPattern |
  ListPattern "." recordPattern
}

pattern {
  optvar |
  TuplePattern |
  ListPattern |
  MethPattern
}

Type {
  "_" |
  var|
  Type "?" |
  "[" Type "]" |
  "[" Type "]" "as" "json.object" |
  (!lpar "(" TupleType ")") |
  ("(" ArgsType? ")" !yields "->" Type) |
  "{" RecordType? "}" |
  Type "." Type { var } |
  Type "." "{" RecordType? "}" |
  SourceType
}

RecordType {
  (MethType ",")* MethType
}

MethType {
  Method ":" Type |
  Method "?" ":" Type |
  String "as" Method ":" Type |
  String "as" Method "?" ":" Type
}

SourceType {
  Varlpar "(" ")" |
  Varlpar "(" SourceTracksType ")"
}

SourceTracksType {
  Method "=" ContentType |
  "..." |
  Method "=" ContentType "," SourceTracksType
}

ContentType {
  Var |
  Var "." Var |
  Var "." Var "." Var |
  Varlpar "(" ContentArgsType? ")" |
  Var "." Varlpar "(" ContentArgsType? ")" |
  Var "." Var "." Varlpar "(" ContentArgsType? ")"
}

ContentArgsType {
  (ContentArgType ",")* ContentArgType
}

ContentArgType {
  Var |
  String |
  Integer |
  Float |
  Var "=" Var |
  Var "=" String |
  Var "=" Integer |
  Var "=" Float
}

TupleType {
  Type "*" Type |
  Type "*" TupleType
}

ArgType {
  Type |
  Var ":" Type |
  "?" Var ":" Type
}

ArgsType {
  (ArgType ",")* ArgType
}

Subfield {
  Var "." inSubfield
}

Method { var }

inSubfield {
  Method |
  Method "." inSubfield
}

subfieldLbra {
  Var "." inSubfieldLbra
}

inSubfieldLbra {
  Method { varlbra } |
  Method "." inSubfieldLbra
}

SubfieldLbra {
  Subfield { subfieldLbra }
}

subfieldLpar {
  Var "." inSubfieldLpar
}

inSubfieldLpar {
  Varlpar |
  Method "." inSubfieldLpar
}

SubfieldLpar {
  Subfield { subfieldLpar }
}

Include {
  (kw<"%include"> | kw<"%include_extra">) absoluteInclude |
  (kw<"%include"> | kw<"%include_extra">) relativeInclude
}

IfDef {
  (kw<"%ifdef"> | kw<"%ifndef">) (Var | Subfield) exprs (kw<"%else"> exprs)? kw<"%endif">
}

IfEncoder {
  (kw<"%ifencoder"> | kw<"%ifnencoder">) Encoder exprs (kw<"%else"> exprs)? kw<"%endif">
}

IfVersion {
  kw<"%ifversion"> (cop<"=="> | cop<">="> | cop<"<="> | cop<">"> | cop<"<">) (Integer | Float | Version) exprs (kw<"%else"> exprs)? kw<"%endif">
}

innerListSpread {
  Op { "..." } expr?
}

innerListItem {
  Spread { innerListSpread } |
  expr
}

innerList {
  (innerListItem ",")* innerListItem ","?
}

List {
  "[" innerList? "]"
}

innerTuple {
  expr "," expr |
  expr "," innerTuple
}

RecordEntry {
  Method "=" expr |
  Op { "..." } expr
}

record /* precedence: left 1 */ {
  RecordEntry |
  record "," RecordEntry
}

NamedArg {
  Var "=" expr
}

appListElem {
  NamedArg |
  AnonymousArg { expr } |
  kw<"%argsof"> "(" Var ")" |
  kw<"%argsof"> "(" Subfield ")" |
  kw<"%argsof"> "(" varlbra "[" argsOfParams "]" ")" |
  kw<"%argsof"> "(" SubfieldLbra "[" argsOfParams "]" ")"
}

appList {
  appListElem |
  appListElem "," appList
}

MethodApp {
  Varlpar "(" appList? ")"
}

invoked {
  Method |
  MethodApp
}

Tuple {
  "(" innerTuple? ")"
}

AnonymousFunction {
  dkw<"fun"> Arglist !yields "->" expr
}

If {
  ckw<"if">
  IfCondition { exprs }
  ckw<"then">
  IfThen { exprs }
  (ckw<"elsif"> ElsifCondition { exprs } ckw<"then"> ElsifThen { exprs })*
  (ckw<"else"> IfElse { exprs })?
  ckw<"end">
}

InlineIf {
  expr !question ckw<"?"> expr !colon ckw<":"> expr
}

Get {
  !get DerefOf { "!" } expr
}

Set {
  expr UpdateOp { !set ":=" } expr
}

Record {
  (expr !dot "." "{" record? ","? "}") |
  "{" record ","? "}" |
  "{" "}"
}

Coerce {
  "(" expr TypeOp { ":" } Type ")"
}

Parens {
  "(" expr ")"
}

Not {
  !not lop<"not"> expr
}

Invoke {
  expr "." invoked |
  (expr !question "?." invoked)
}

App {
  Varlpar "(" appList? ")"
}

Append {
  expr Op { !coloncolon "::" } expr
}

Assoc {
  varlbra "[" expr "]" |
  expr "." varlbra "[" expr "]"
}

Block {
  kw<"begin"> exprs kw<"end">
}

SimpleFun {
  "{" simpleFunBody "}"
}

While {
  ckw<"while"> expr ckw<"do"> WhileDo { exprs } ckw<"end">
}
 
ForVar { optvar }

For {
  ckw<"for"> ForVar "=" ForFrom { expr } ckw<"to"> ForTo { expr } ckw<"do"> ForDo { exprs } ckw<"end"> |
  ckw<"for"> ForVar "=" ForIteration { expr } ckw<"do"> ForDo { exprs } ckw<"end">
}

Coalesce {
  expr Op { !coalesce "??" } expr
}

TryBody { exprs }

Try {
  ckw<"try">
    TryBody
  ckw<"catch"> optvar kw<":"> List ckw<"do">
    TryDo { exprs }
  ckw<"end"> |
  ckw<"try">
    TryBody
  ckw<"catch"> optvar ckw<"do">
    TryDo { exprs }
  ckw<"end">
}

And {
  expr !and lop<"and"> expr
}

Or {
  expr !or lop<"or"> expr
}

op {
  !bin1 cop<bin1> |
  !bin2 aop<bin2> |
  !bin3 aop<bin3>
}

Infix { expr op expr }

Minus {
  !uminus uminus expr
}

expr {
  Include |
  IfDef |
  IfEncoder |
  IfVersion |
  Coerce |
  Parens |
  Integer |
  Not |
  Bool |
  Float |
  Minus |
  String |
  Var |
  List |
  Get |
  Set |
  Encoder |
  Tuple |
  Record |
  Invoke |
  App |
  Append |
  Assoc |
  Block |
  AnonymousFunction |
  SimpleFun |
  While |
  For |
  Coalesce |
  Try |
  If |
  Regexp |
  InlineIf |
  And |
  Or |
  Infix |
  TimePredicate
}

BlockComment {
  "#<" blockCommentContent* ">#"
}

@skip {
  spaces |
  newline |
  LineComment |
  BlockComment
}

@external tokens varTok from "./tokens" { var, varLpar, varLbra }
@external tokens floatTok from "./tokens" { Float }
@external tokens uminusTok from "./tokens" { uminus }

@tokens {
  @precedence { "%argsof", encoderName }
  @precedence { "%ifdef", encoderName }
  @precedence { "%ifndef", encoderName }
  @precedence { "%ifencoder", encoderName }
  @precedence { "%ifnencoder", encoderName }
  @precedence { "%ifversion", encoderName }
  @precedence { "%else", encoderName }
  @precedence { "%endif", encoderName }
  @precedence { "%include", encoderName }
  @precedence { "%include_extra", encoderName }
  @precedence { encoderName, bin2 }
  @precedence { Version, Integer }
  @precedence { TimePredicate, Integer }
  @precedence { regexpContentToken, RegexpEnd }
  @precedence { "\"", doubleQuoteStringContentToken }
  @precedence { "#{", doubleQuoteStringContentToken } 
  @precedence { "'", singleQuoteStringContentToken }
  @precedence { "#{", singleQuoteStringContentToken }
  @precedence { doubleQuoteStringContentToken, spaces }
  @precedence { singleQuoteStringContentToken, spaces }
  @precedence { doubleQuoteStringContentToken, newline }
  @precedence { singleQuoteStringContentToken, newline }
  @precedence { doubleQuoteStringContentToken, "#<" }
  @precedence { singleQuoteStringContentToken, "#<" }
  @precedence { regexpContentToken, spaces }
  @precedence { regexpContentToken, newline }
  @precedence { regexpContentToken, "#<" }
  @precedence { doubleQuoteStringContentToken, LineComment }
  @precedence { singleQuoteStringContentToken, LineComment }
  @precedence { regexpContentToken, LineComment }
  @precedence { "#{", LineComment }
  @precedence { "#<", LineComment }
  @precedence { "#<", blockCommentContent }
  @precedence { ">#", blockCommentContent }
  @precedence { blockCommentContent, LineComment }
  @precedence { blockCommentContent, spaces }
  @precedence { blockCommentContent, newline }

  "{"[closedBy="}"]
  "}"[openedBy="}"]
  "("[closedBy=")"]
  ")"[openedBy="("]
  "["[closedBy="]"]
  "]"[openedBy="["]

  spaces { $[\u0009 \u000b\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline { $[\r\n\u2028\u2029] }
  LineComment { "#" ![\n]* }
  blockCommentContent { ![@>]+ | ">" }

  bin1 {
    "!=" | "==" | "<" | "<=" | ">" | ">="
  }
  bin2 {
    "+" | "%" | "^" | "+." | "-." | "-"
  }
  bin3 {
    "/" | "*." | "/." | "*" | "mod"
  }
  Integer {
    $[0-9] $[0-9_]* | "0" $[xX] $[0-9a-fA-F_]+ | "0" $[oO] $[0-7_]+
  }
  Version {
    $[0-9] $[0-9_]* "." $[0-9] $[0-9_]* "." $[0-9] $[0-9_]*
  }
  Bool {
    "true" | "false"
  }
  encoderName {
    "%" $[a-zA-Z]+ $[a-zA-Z0-9_\.]+
  }
  TimePredicate /* precedence: left 1 */ {
    ($[0-9]+ "w")? $[0-9]+ "h" $[0-9]+ | $[0-9]+ "w" ($[0-9]+ "h")? ($[0-9]+ "m")? ($[0-9]+ "s")? | ($[0-9]+ "w")? $[0-9]+ "h" ($[0-9]+ "m")? ($[0-9]+ "s")? | ($[0-9]+ "w")? ($[0-9]+ "h")? $[0-9]+ "m" ($[0-9]+ "s")? | ($[0-9]+ "w")? ($[0-9]+ "h")? ($[0-9]+ "m")? $[0-9]+ "s"
  }
  exprSep {
    ";"
  }
  regexpContentToken { ![/\\]+ }
  regexpSlashNoEscape { "\\" ![/] }
  RegexpEnd[openedBy=regexpStart] { "/" $[gismu]* }
  EscapedChar { "\\" _ }
  doubleQuoteStringContentToken {
    !["#\\]+ | "#" 
  }
  singleQuoteStringContentToken {
    !['#\\]+ | "#"
  }
  relativeInclude { "\"" !["]+ "\"" }
  absoluteInclude { "<" ![>]+ ">" }
}
